#include <Arduino.h>
#include <TFT_eSPI.h>    // Graphics and font library for ST7735 driver chip
#include <SPI.h>
#include <WiFi.h>
#include <MFRC522.h>

// Pin definitions for the RFID module
#define SS_PIN 13  // Slave Select pin for RFID
#define RST_PIN 22 // Reset pin for RFID

// Create instances
TFT_eSPI tft = TFT_eSPI();         // Initialize TFT display
MFRC522 mfrc522(SS_PIN, RST_PIN);  // Initialize MFRC522 RFID reader

// MIFARE Key (default key)
MFRC522::MIFARE_Key key;

// WiFi credentials (ensure this file contains your actual SSID and PASSWORD)
#include "arduino_secrets.h"

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  Serial.println("Initializing setup...");

  // Initialize TFT display
  tft.init();
  tft.setRotation(1); // Adjust rotation as needed
  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setCursor(0, 0);
  tft.println("Initializing RFID...");
  Serial.println("TFT initialized.");

  // Initialize RFID reader
  SPI.begin(25, 33, 26); // Initialize SPI with SCK=25, MISO=33, MOSI=26
  mfrc522.PCD_Init();    // Initialize RFID reader
  Serial.println("RFID reader initialized.");
  tft.println("RFID Initialized");

  // Prepare the MIFARE Key (assuming default key A)
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  // Allow some time before starting
  delay(1000);
  tft.fillScreen(TFT_BLACK);
}

void loop() {
  // Look for new RFID cards
  if ( !mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Select one of the cards
  if ( !mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  Serial.println("RFID tag detected");
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 0);
  tft.println("RFID Tag Detected");

  // Specify the block to read (ensure this block is readable and contains data)
  byte blockAddr = 1; // You can change this to another block if needed
  byte trailerBlock = (blockAddr / 4) * 4 + 3; // Calculate trailer block for the sector

  Serial.print("Authenticating with trailer block ");
  Serial.println(trailerBlock);
  tft.println("Authenticating...");

  // Authenticate using key A
  MFRC522::StatusCode status = mfrc522.PCD_Authenticate(
    MFRC522::PICC_CMD_MF_AUTH_KEY_A,
    trailerBlock,
    &key,
    &(mfrc522.uid)
  );

  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    tft.println("Auth Failed");
    mfrc522.PICC_HaltA();       // Halt PICC
    mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    return;
  }

  Serial.println("Authentication successful");
  tft.println("Auth Successful");

  // Read data from the specified block
  byte buffer[18];
  byte size = sizeof(buffer);
  status = mfrc522.MIFARE_Read(blockAddr, buffer, &size);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Read failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    tft.println("Read Failed");
    mfrc522.PICC_HaltA();       // Halt PICC
    mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    return;
  }

  Serial.println("Read successful");
  tft.println("Read Successful");

  // Convert buffer to a readable string
  String data = "";
  for (byte i = 0; i < 16; i++) { // RFID data blocks are 16 bytes
    if (buffer[i] != 0) { // Ignore null characters
      data += (char)buffer[i];
    }
  }

  Serial.print("Data: ");
  Serial.println(data);
  tft.println("Data:");
  tft.println(data);

  // Halt PICC and stop encryption
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();

  delay(5000); // Wait before the next read
}